#!/usr/bin/python3
import base64
import os
import socket
import sys
import threading
import traceback

import paramiko
from paramiko.py3compat import b, u, decodebytes


# setup logging
paramiko.util.log_to_file("demo_server.log")

HOST_KEY_FILE = "test_rsa.key"
MAXIMUM_LISTEN_QUEUE = 100
# TODO change to 22 later
PORT = 2200

class Server(paramiko.ServerInterface):
    def __init__(self):
        self.event = threading.Event()

    def check_channel_request(self, kind, chanid):
        if kind == "session":
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def check_auth_password(self, username, password):
        if (username == "test") and (password == "test"):
            return paramiko.AUTH_SUCCESSFUL
        return paramiko.AUTH_FAILED


def main() -> None:
    try:
        serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        serverSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        serverSocket.bind(("", 2200))
    except socket.error as error:
        sys.exit(f"Failed to Bind to port {PORT}\n{error}")

    try:
        serverSocket.listen(MAXIMUM_LISTEN_QUEUE)
        client, _ = serverSocket.accept()
    except socket.error as e:
        sys.exit(f"Failed to listen or accept\n{e}")

    print("Got a connection!")
    # TODO use global file name
    host_key = paramiko.RSAKey(filename="test_rsa.key")

    try:
        t = paramiko.Transport(client)
        t.add_server_key(host_key)
        server = Server()

        try:
            t.start_server(server=server)
        except paramiko.SSHException:
            print("*** SSH negotiation failed.")
            sys.exit(1)

        chan: paramiko.Channel = t.accept(20)

        print(chan.recv(1024))

        chan.send("\r\nI don't like you.\r\n")
        chan.close()

    except Exception as e:
        print("*** Caught exception: " + str(e.__class__) + ": " + str(e))
        traceback.print_exc()
        try:
            t.close()
        except:
            pass
        sys.exit(1)


if __name__ == "__main__":
    main()